#!/usr/bin/env python3

import subprocess
import argparse
import os

def run_clang_tidy_batch(
    file_list_path,
    clang_tidy_path="clang-tidy",
    config_file=".clang-tidy",
    json_file="compile_commands.json",
    extra_args=None,
    only_cpp=True,
):
    if not os.path.isfile(file_list_path):
        print(f"❌ File list not found: {file_list_path}")
        return

    with open(file_list_path, "r") as f:
        files = [line.strip() for line in f if line.strip()]

    if only_cpp:
        files = [f for f in files if f.endswith((".cpp", ".cc", ".cxx"))]

    if not files:
        print("⚠️ No files to analyze.")
        return

    cmd = [clang_tidy_path, "-p",json_file,"--config-file", config_file] + files

    if extra_args:
        cmd += ["--"] + extra_args

    print("→ Running clang-tidy on:")
    for file in files:
        print(f"   • {file}")
    print()

    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"❌ clang-tidy failed with exit code {e.returncode}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run clang-tidy on multiple files from a list.")
    parser.add_argument("file_list", help="Path to the list of files (generated by CMake).")
    parser.add_argument("--clang-tidy", default="clang-tidy", help="Path to the clang-tidy executable.")
    parser.add_argument("--config-file", default=".clang-tidy", help="Path to the .clang-tidy config file.")
    parser.add_argument("--all", action="store_true", help="Include headers (*.h, *.hpp) in analysis.")
    parser.add_argument("--json",default="compile_commands.json",help="Json Compile commands file")
    parser.add_argument("--extra-args", nargs=argparse.REMAINDER, help="Extra args passed after '--'")

    args = parser.parse_args()

    run_clang_tidy_batch(
        file_list_path=args.file_list,
        clang_tidy_path=args.clang_tidy,
        config_file=args.config_file,
        json_file=args.json,
        extra_args=args.extra_args,
        only_cpp=not args.all
    )
