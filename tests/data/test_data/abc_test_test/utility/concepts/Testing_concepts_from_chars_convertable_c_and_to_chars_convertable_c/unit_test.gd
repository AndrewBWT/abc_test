#class std::map<class std::basic_string<char8_t,struct std::char_traits<char8_t>,class std::allocator<char8_t> >,class std::optional<struct std::pair<bool,bool> >,struct std::less<class std::basic_string<char8_t,struct std::char_traits<char8_t>,class std::allocator<char8_t> > >,class std::allocator<struct std::pair<class std::basic_string<char8_t,struct std::char_traits<char8_t>,class std::allocator<char8_t> > const ,class std::optional<struct std::pair<bool,bool> > > > >
("short", {(true,true)})
("unsigned short", {(true,true)})
("int", {(true,true)})
("unsigned int", {(true,true)})
("long", {(true,true)})
("unsigned long", {(true,true)})
("__int64", {(true,true)})
("unsigned __int64", {(true,true)})
("bool", {(false,false)})
("signed char", {(true,true)})
("unsigned char", {(true,true)})
("char", {(true,true)})
# Are these right? They don't feel right.
("wchar_t", {(false,true)})
("char8_t", {(false,true)})
("char16_t", {(false,true)})
("char32_t", {(false,true)})
("float", {(true,true)})
("double", {(true,true)})
("long double", {(true,true)})
("struct `anonymous namespace'::X", {(false,false)})
("class std::vector<int,class std::allocator<int> >", {(false,false)})
