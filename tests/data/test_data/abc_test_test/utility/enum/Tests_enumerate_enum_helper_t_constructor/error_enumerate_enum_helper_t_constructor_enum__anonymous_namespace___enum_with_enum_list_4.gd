#class std::tuple<class std::vector<struct std::pair<int,class std::basic_string<char8_t,struct std::char_traits<char8_t>,class std::allocator<char8_t> > >,class std::allocator<struct std::pair<int,class std::basic_string<char8_t,struct std::char_traits<char8_t>,class std::allocator<char8_t> > > > >,class std::basic_string<char8_t,struct std::char_traits<char8_t>,class std::allocator<char8_t> > >
([],"An enumerate_enum_helper_t<enum `anonymous namespace'::enum_with_enum_list_4> object cannot be constructed using the enum_list_t argument \"[]\". Note that in the proceeding text representation of the enum_list_t argument, the \"enum `anonymous namespace'::enum_with_enum_list_4\" elements have been converted to the enum's underlying integer type \"int\". The reason the constructor failed is that enumerate_enum_helper_t objects created using empty enum_list_t objects are not allowed.")
([(1,"one"),(2,"one")],"An enumerate_enum_helper_t<enum `anonymous namespace'::enum_with_enum_list_4> object cannot be constructed using the enum_list_t argument \"[(1, \"one\"), (2, \"one\")]\". Note that in the proceeding text representation of the enum_list_t argument, the \"enum `anonymous namespace'::enum_with_enum_list_4\" elements have been converted to the enum's underlying integer type \"int\". The reason the constructor failed is that in enumerate_enum_helper_t, enums with overlapping text representation's are not allowed. The first issue encountered is that the text representation \"one\" (accessed when printing or parsing using the enum abc::utility::enum_helper_string_type_e value \"unchanged\") is already mapped to the \"enum `anonymous namespace'::enum_with_enum_list_4\" enum represented by the underlying \"int\" value 1. An attempt is being made by the constructor to map this text representation to the \"enum `anonymous namespace'::enum_with_enum_list_4\" enum represented by the underlying \"int\" value 2. Doing so would introduce ambiguity when parsing enums, and is therefore not allowed.")
([(1,"One"),(2,"one")],"An enumerate_enum_helper_t<enum `anonymous namespace'::enum_with_enum_list_4> object cannot be constructed using the enum_list_t argument \"[(1, \"One\"), (2, \"one\")]\". Note that in the proceeding text representation of the enum_list_t argument, the \"enum `anonymous namespace'::enum_with_enum_list_4\" elements have been converted to the enum's underlying integer type \"int\". The reason the constructor failed is that in enumerate_enum_helper_t, enums with overlapping text representation's are not allowed. The first issue encountered is that the text representation \"one\" (accessed when printing or parsing using the enum abc::utility::enum_helper_string_type_e value \"lower\") is already mapped to the \"enum `anonymous namespace'::enum_with_enum_list_4\" enum represented by the underlying \"int\" value 1. An attempt is being made by the constructor to map this text representation to the \"enum `anonymous namespace'::enum_with_enum_list_4\" enum represented by the underlying \"int\" value 2. Doing so would introduce ambiguity when parsing enums, and is therefore not allowed.")